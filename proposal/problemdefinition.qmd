# The Problem

```{=html}
<!-- 
Outlining the issue / weak point / problem to be solved by this proposal. This should be a compelling section that sets the reader up for the next section - the proposed solution!

It is important to cover:

 - [ ] What the problem is
 - [ ] Who it affects
 - [ ] Have there been previous attempts to resolve the problem
 - [ ] Why it should be tackled
-->
```
Both R and Python have become the *lingua franca* of geospatial analysis. This is evident from the equally growing number of language-specific questions on [[GIS Stack Exchange]{.underline}](https://gis.stackexchange.com/) over the past decade (see @fig-trends) and the publishing of the open source [[geocompx]{.underline}](https://geocompx.org/) books such as _Geocomputation with Python_ [@dorman_geocomputation_2025] and _Geocomputation with R_ [@lovelace_geocomputation_2025]. While their high-level interfaces differ, both languages rely on the same core open-source geospatial libraries, such as `GDAL`, `GEOS`, and `PROJ`. They share an object-oriented approach and significant functional overlap, leading to interoperability efforts like the `reticulate` package, which enables Python integration within R.


```{r}
source("src/utils-ggplot.R")
library(dplyr)
library(httr2)
library(dplyr)
library(lubridate)
library(marquee)

ggplot2::theme_set(theme_wbw())
```


```{r}
tags <- c(
  "python;shapely",
  "pyproj",
  "geopandas",
  "rioxarray",
  "xarray",
  "r;sf",
  "r;sp",
  "r;terra",
  "r;stars",
  "r;raster"
)

# The API request is commented due to not overuse it

# base_url <- "https://api.stackexchange.com/2.3/questions"
# end_date <- Sys.Date()
# start_date <- Sys.Date() - lubridate::years(10)
# fromdate <- as.numeric(as.POSIXct(start_date, tz = "UTC"))
# todate <- as.numeric(as.POSIXct(end_date, tz = "UTC"))
# results <- list()
# for (tag in tags) {
#   all_questions <- list()
#   page <- 1
#   has_more <- TRUE
#   while (has_more) {
#     req <- httr2::request(base_url) |>
#       httr2::req_url_query(
#         order = "asc",
#         sort = "creation",
#         tagged = tag,
#         site = "gis",
#         fromdate = fromdate,
#         todate = todate,
#         page = page,
#         pagesize = 100
#       )
#     resp <- httr2::req_perform(req)
#     data <- httr2::resp_body_json(resp)
#     all_questions <- c(all_questions, data$items)
#     has_more <- data$has_more
#     page <- page + 1
#     Sys.sleep(0.5)
#   }
#   df <- data.frame(
#     creation_date = as.POSIXct(
#       sapply(all_questions, `[[`, "creation_date"),
#       origin = "1970-01-01",
#       tz = "UTC"
#     ),
#     question_id = sapply(all_questions, `[[`, "question_id")
#   )
#   df$tag <- tag
#   results[[tag]] <- df
# }
# qs::qsave(results, "data/gis-se_responses.qs")

results <- qs::qread("data/gis-se_responses.qs")

# Bind together individual tag's responses
final_df <-
  results |>
  dplyr::bind_rows() |>
  dplyr::as_tibble()

# Count unique questions per day
tag_df <-
  final_df |>
  dplyr::distinct(question_id, .keep_all = TRUE) |>
  dplyr::mutate(date = lubridate::as_date(creation_date)) |>
  dplyr::group_by(date, tag) |>
  dplyr::reframe(count = dplyr::n())

# Cumulative sums
cumsum_df <-
  tag_df |>
  dplyr::filter(!grepl("gdal", tag)) |>
  dplyr::mutate(
    lang = dplyr::case_when(
      grepl("python;", tag) ~ "python",
      grepl("geopandas", tag) ~ "python",
      grepl("xarray", tag) ~ "python",
      grepl("pyproj", tag) ~ "python",
      grepl("sf$", tag) ~ "r",
      grepl("sp$", tag) ~ "r",
      grepl("r;", tag) ~ "r"
    )
  ) |>
  dplyr::group_by(lang) |>
  dplyr::arrange(date, .by_group = TRUE) |>
  dplyr::mutate(count = cumsum(count)) |>
  dplyr::ungroup()
```


```{r}

# Annotation text
md_text <-
  "# ![](https://cdn.sstatic.net/Sites/gis/Img/logo.svg)<br>
Cumulative sum of unique questions at _https://gis.stackexchange.com/_,
tagged either with {#EE6677 **Python**} ![](assets/Python-logo-notext.svg) or
![](https://cran.r-project.org/Rlogo.svg) languages since 2015 to present

{#4477AA **R**} libraries include `sf`, `sp`, `raster`,
`terra`, `stars` tags

{#EE6677 **Python**} libraries include `geopandas`, `xarray`, `rioxarray`,
`PyProj`, `shapely` and `rasterio` tags
"

# Annotation style
text_box_style <-
  marquee::modify_style(
    marquee::classic_style(
      base_size = 4,
      body_font = "Inter",
      header_font = "Inter",
    ),
    "body",
    padding = marquee::skip_inherit(marquee::trbl(-10, 2, 2, 2)),
    border_radius = 3
  )

plt_gis <-
  cumsum_df |>
  ggplot2::ggplot(
    ggplot2::aes(
      x = date,
      y = count,
      color = lang
    )
  ) +
  ggplot2::geom_line() +
  ggplot2::annotate(
    GeomMarquee,
    label = md_text,
    x = lubridate::as_date("2014-11-01"),
    y = 2660,
    family = "Inter",
    style = text_box_style,
    size = 2.4,
    fill = colorspace::lighten("#efebe1", 0.3),
    width = 0.5,
    hjust = "left",
    vjust = "top"
  ) +
  ggplot2::scale_y_continuous(
    expand = ggplot2::expansion(c(0, 0.01)),
    breaks = scales::pretty_breaks(),
    labels = scales::number_format(big.mark = ","),
    limits = c(0, 2700)
  ) +
  ggplot2::scale_x_date(
    labels = scales::date_format("%Y"),
    breaks = scales::date_breaks(width = "2 years"),
    minor_breaks = scales::date_breaks("1 year")
  ) +
  ggplot2::scale_color_manual(
    values = c(wbw_red, wbw_blue)
  ) +
  ggplot2::labs(
    y = "**Cumulative count of unique questions**",
    x = "",
    color = ""
  ) +
  ggplot2::theme(
    legend.position = "none"
  )

# Save
wbw_save(
  "figures/figure01_gis_se_trends.png",
  plot = plt_gis,
  dpi = 500,
  w = 14,
  h = 11
)
```

![Cumulative sums of unique questions asked on a https://gis.stackexchange.com during the 2015–2025 period and tagged with either R or Python.](figures/figure01_gis_se_trends.png){#fig-trends width=60%}

R’s spatial libraries—such as `sf`, `terra`, `geos`, and `tmap` — offer comprehensive tools for processing and visualising raster and vector data. These tools support various geospatial tasks, including data input/output (I/O), geometry operations, reprojections, spatial statistics, and static or interactive map-making. Additionally, R packages interface with desktop GIS software like [[QGIS]{.underline}](https://qgis.org/en/site/), [[ArcGIS]{.underline}](http://desktop.arcgis.com/en/arcmap/), [[GRASS GIS]{.underline}](https://grass.osgeo.org/), and [[SAGA]{.underline}](https://saga-gis.sourceforge.io/en/index.html). Libraries such as `whiteboxR` and `traudem` additionally provide access to widely used command-line tools for terrain analysis, including 'Whitebox Tools' [@lindsayWhiteboxGATCase2016] and TauDEM [@tesfaExtractionHydrologicalProximity2011].

Despite R’s extensive geospatial capabilities, terrain analysis—particularly geomorphometric and hydrological modelling—remains computationally inefficient. These workflows often require sequential operations to generate a final raster of interest, such as Digital Elevation Model (DEM) filtering → Fill Sinks → Flow Direction → Flow Accumulation for runoff modelling [@ledouxComputationalModellingTerrains2024]. Currently, such tasks typically rely on external GIS software and can be performed in R via `rgrass`, `Rsagacmd`, `whiteboxR`, or `traudem` packages. Since these workflows produce multiple intermediate rasters that must be written to and read from disk, they involve high I/O overhead. To the authors' knowledge, this challenge is agnostic to programming language and has been only recently tackled by J. Lindsay, who introduced the [[_'Whitebox Workflows for Python'_]{.underline}](https://www.whiteboxgeo.com/whitebox-workflows-for-python/).

The Whitebox Workflows for Python (WWP) is a native extension module for Python designed for advanced geoprocessing. It includes over 500 functions for GIS, remote sensing analysis, and the manipulation of raster, vector, and LiDAR data. Unlike the previously mentioned libraries, it is built on a custom Rust-based core, which enables direct interaction with geospatial data objects. This approach significantly reduces the number of read/write operations during intermediate processing, enhancing performance in complex workflows and minimizing wear on system hardware. Unlike its predecessor, 'Whitebox Tools' [@lindsayWhiteboxGATCase2016], which has an open-source core, WWP is a closed-source library distributed under a proprietary license. 'Whitebox Geospatial Inc.' developed both tools and distributes them under a freemium marketing strategy. While the majority of functionality is available for free, more than 80 tools for LiDAR processing, machine learning, and agriculture are only available by subscription as part of the [['Whitebox Workflows for Python Pro']{.underline}](https://www.whiteboxgeo.com/whitebox-workflows-professional/) and [['Whitebox Toolset Extension']{.underline}](https://www.whiteboxgeo.com/product/whitebox-toolset-extension/) products.

Bindings for the original _Whitebox Tools_ and its paid version, _Whitebox Toolset Extension_, are already available in R through the [[`whiteboxR` package]{.underline}](https://github.com/opengeos/whiteboxR). Over the years, this package has gained significant attention, earning more than 170 stars on GitHub and accumulating 39,000 downloads from CRAN. Since WWP is a natural extension of the Whitebox Open Core, R bindings for it are expected to be well-received by R users as well. Therefore, we are aiming to develop a `wbw` R package that will serve as a bridge between _'Whitebox Workflows for Python'_ and R, providing users a seamless access to all functionality of _'Whitebox Workflows for Python'_ and _'Whitebox Workflows for Python Pro'_.