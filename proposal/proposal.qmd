# The proposal
<!--
This is where the proposal should be outlined. 
-->

Our goal is to integrate 'Whitebox Workflows' into R, ensuring full interoperability with the existing R-spatial stack and enhancing its geospatial processing capabilities. This integration will expand the accessibility and adoption of advanced geospatial workflows within the R ecosystem, expected to be used by researchers, academics and analysts. By strengthening R’s position in geospatial analysis, this project will contribute to a more diverse and competitive ecosystem, reducing the need to switch between scripting languages and fostering innovation within R community.

## Overview
<!--
At a high-level address what your proposal is and how it will address the problem identified. Highlight any benefits to the R Community that follow from solving the problem. This should be your most compelling section.
-->

The `wbw` R package will be developed serving as a bridge between _'Whitebox Workflows for Python'_ and R. However, since the existing R-spatial toolkit is already quite mature and diverse, we are aiming to make `wbw` functions and objects fully interoperable with R-spatial pillars such as `sf` and `terra`. By investing in existing convention will repay in a smoother learning curve for the new users. The primary workhorse for `wbw` would be the `S7` and `reticulate` packages, which will enable us to access the WWP computational engine.

## Detail {#sec-tech}
<!--
Go into more detail about the specifics of the project and it delivers against the problem.

Depending on project type the detail section should include:

 - [ ] Minimum Viable Product
 - [ ] Architecture
 - [ ] Assumptions
-->

The Minimum Viable Product (MVP) *per se* already exists and was published as an alpha version on [[GitHub]{.underline}](https://github.com/atsyplenkov/wbw) by Anatolii Tsyplenkov in January 2025. The MVP introduces several `S7` class objects, such as `WhiteboxRaster` and `WhiteboxExtent`, which provide pointers to WWP objects via the `reticulate` package, along with a family of `wbw_*` functions implemented as `S7` generic methods. Additionally, transition functions for converting `WhiteboxRaster` to `SpatRast` objects (from `terra` package) and *vice versa* (`as_rast()` and `as_wbw_raster()`) have been implemented. Even at this early stage, the MVP enables basic terrain analysis, as demonstrated below:

```{r}
#| eval: false
#| echo: true
#| include: true

library(wbw)
library(terra)

# Path to the example DEM
raster_path <- system.file("extdata/dem.tif", package = "wbw")

wbw_read_raster(raster_path) |> # Read raster as a WhiteboxRaster object
  wbw_gaussian_filter(sigma = 1.5) |> # Apply a smoothing filter
  wbw_aspect() |> # Estimate terrain aspect in degrees
  as_rast() |> # Convert to SpatRaster
  plot(main = "Aspect") # plot using {terra} capabilities
```

<!-- ![Terrain aspect (in degrees), estimated using the `wbw` package and plotted with `terra`](https://github.com/atsyplenkov/wbw/blob/main/man/figures/README-terra-1.png?raw=true){#fig-aspect width=50%} -->

The alpha version (v0.0.3) was well received by the community, serving as a catalyst for this proposal while also highlighting weaknesses in the software that this proposal mentions later. At the same time, the first benchmarks, comparing existing R toolkit for terrain analysis (`whiteboxR` and `terra`), shows that the `wbw` can significantly outperform them in a complex workflows (see [[benchmarks]{.underline}](https://wbw.anatolii.nz/articles/benchmarks)). 

One major drawback of many Python-based R packages is the need to manually install Python dependencies, as seen in packages like `rgee` and `keras`. In our view, this can overcomplicate usage and deter users. To address this issue, the `wbw` package currently installs Python dependencies automatically on first launch. However, with the recent release of `reticulate` 1.41, dependency management can be streamlined using the `uv` Python environment manager, for example as it is currently implemented in [[`vrtility` package]{.underline}](https://github.com/Permian-Global-Research/vrtility). Therefore, the first goal of the project is to rewrite its dependency management system.

This leads to the second goal—writing tests that mock different environments across operating systems to ensure smooth installation and package loading. Additionally, property-based testing will be introduced to prevent R crashes, and snapshot tests will be implemented to ensure consistent output in complex workflows.

Once dependency management and testing infrastructure are in place, the third objective is to integrate existing WWP functions. Currently, only 32 out of approximately 507 WWP functions have R bindings, meaning that more than 90% of the tools still need to be ported (see roadmap on [[GitHub]{.underline}](https://github.com/atsyplenkov/wbw/issues/1)). This will also require introducing additional `S7` classes to handle vector (i.e., `WhiteboxVector`) and LiDAR data (`WhiteboxLidar`). 

Special attention will be given to the premium functions, which are currently available only under the _Whitebox Workflows for Python Pro_ license. We do not fully support the freemium strategy, as it does not align with the spirit of OSS. As a result, none of the authors have tested the PRO functions before. However, their integration into `wbw` is considered necessary yet ambiguous. By examining the WWP documentation, we anticipate that implementing these functions in `wbw` will be similar to other functions in the package and will require only an activation key, which can be stored as an environmental variable. Similar approach has already been implemented in the `whiteboxR` codebase. However, additional testing is needed.

Finally, we aim to enhance the existing documentation by adding tutorials, benchmarks, and articles, as we believe that better documentation leads to better software [@doraAccelerateStateDevOps2023].